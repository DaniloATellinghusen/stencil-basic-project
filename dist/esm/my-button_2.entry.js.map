{"file":"my-button.my-input.entry.js","mappings":"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","names":[],"sources":["./src/components/button/themes/vwag/button.vwag.scss?tag=my-button&mode=vwag&encapsulation=shadow","./src/components/button/button.tsx","./src/components/input/themes/vwag/input.vwag.scss?tag=my-input&mode=vwag&encapsulation=shadow","./src/components/input/input.tsx"],"sourcesContent":["@import './button.vwag.common';\n\n:host div {\n  color: white;\n  background: darkcyan;\n  border: 1px solid darkcyan;\n}\n\n:host a {\n  color: inherit;\n  border-color: inherit;\n}\n","import {\n  Component,\n  Element,\n  h,\n  Host,\n  Listen,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\n\n/**\n * @nativeEvent click  - dispatched when button was clicked\n *\n * @slot default - default slot for the content of the button\n */\n@Component({\n  tag: 'my-button',\n  styleUrls: {\n    vwag: 'themes/vwag/button.vwag.scss'\n  },\n  shadow: { delegatesFocus: true },\n})\nexport class Button {\n\n  /**\n   * icon name e.g. 'clock-24'. Use the following matching icon sizes for the different button sizes: s: 16px m: 24px l: 32px\n   */\n  @Prop({ reflect: true }) readonly icon: string;\n\n  /**\n   * deactivates the button\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\n\n  /**\n   * optionally specifies the new filename for the downloaded file if a url is specified.\n   */\n  @Prop({ reflect: true }) readonly download: string;\n\n  /**\n   * value of the button. This is the value that will be submitted if the button is placed inside a form.\n   */\n  @Prop({ reflect: true }) readonly value: string;\n\n  @Element() host: HTMLElement;\n  private anchorTag: HTMLElement;\n\n  @State() tabIndex: number = 0;\n\n  @State() backupTabIndex: number;\n\n  @Watch('disabled')\n  handleDisabledChanged() {\n    try {\n      if (this.disabled) {\n        this.backupTabIndex = this.tabIndex;\n      }\n      this.host.shadowRoot.getElementById('button').blur();\n    } catch (event) {}\n  }\n\n  @Listen('keydown')\n  onKeyDown(event: KeyboardEvent) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n    }\n  }\n\n  @Listen('keyup')\n  onKeyUp(event: KeyboardEvent) {\n    if (event.code === 'Enter' || event.code === 'Space') {\n      this.host.dispatchEvent(new window.Event('click', { bubbles: true }));\n    }\n  }\n\n  @Listen('click', { capture: true })\n  captureClick(event) {\n    if (this.disabled) {\n      event.stopPropagation();\n    }\n  }\n\n  @Listen('click')\n  onClick() {\n      this.anchorTag.click();\n  }\n\n  componentWillLoad() {\n    this.backupTabIndex = Number(this.host.getAttribute('tabindex'));\n  }\n\n  private getSlotAndIcon() {\n      return <slot />;\n  }\n\n  render() {\n    return (\n      <Host role=\"button\">\n        {(\n          <a\n            ref={(el) => (this.anchorTag = el)}\n            tabindex=\"-1\"\n          >\n            <div tabIndex={this.tabIndex} id=\"button\">\n              {this.getSlotAndIcon()}\n            </div>\n          </a>\n        )}\n      </Host>\n    );\n  }\n}\n","@import './input.vwag.common';\n\n:host {\n  ::slotted([slot='label']) {\n    color: gray;\n  }\n\n  input {\n    height: 2rem;\n    font-size: 1rem;\n    background: white;\n    border: 1px solid gray;\n    color: darkblue;\n\n    &::placeholder {\n      color: gray;\n    }\n  }\n\n  ::slotted([slot='description']),\n  #typing-info {\n    color: gray;\n  }\n}\n\n:host(:not([disabled=''])) {\n  input {\n    &:hover,\n    &:focus {\n      border-color: darkblue;\n    }\n  }\n}\n","import {\n  Component,\n  Element,\n  h,\n  Host,\n  Listen,\n  Prop,\n  State,\n} from '@stencil/core';\n\n/**\n * @nativeEvent click - dispatched when input was clicked => 'event.target.value' delivers the current value\n * @nativeEvent change - dispatched when input has changed => 'event.target.value' delivers the current value\n * @nativeEvent invalid - dispatched when input is invalid => 'event.target.value' delivers the invalid value\n *\n * @slot description - named slot 'description', here is any HTML content allowed.\n * @slot label - named slot 'label', here is any HTML content allowed.\n */\n@Component({\n  tag: 'my-input',\n  styleUrls: {\n    vwag: 'themes/vwag/input.vwag.scss'\n  },\n  shadow: { delegatesFocus: true },\n})\nexport class Input {\n  /**\n   * toggles readonly mode\n   */\n  @Prop({ reflect: true }) readonly readonly: boolean;\n\n  /**\n   * placeholder of the input-field<br>\n   */\n  @Prop({ reflect: true }) readonly placeholder: string;\n\n  /**\n   * value of the input-field\n   */\n  @Prop({ reflect: true, mutable: true }) value: string;\n\n  /**\n   * sets input-field to readonly\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean;\n\n  /**\n   * specifies the type of input element\n   */\n  @Prop({ reflect: true }) readonly type: string = 'text';\n\n  /**\n   * name of the input element to support forms\n   */\n  @Prop({ reflect: true }) readonly name: string;\n\n  /**\n   * determines which brand to use.\n   */\n  @Prop({ reflect: true }) readonly brand: string = 'vwag';\n\n  @State() hasFocus: boolean;\n\n  @Element() host: HTMLElement;\n\n  @Listen('focus')\n  onFocus() {\n    this.hasFocus = true;\n    this.delegateFocusToNativeInput();\n  }\n\n  @Listen('click')\n  onClick() {\n    this.delegateFocusToNativeInput();\n  }\n\n  componentDidLoad() {\n   this.initFormEvent();\n  }\n\n  private initFormEvent() {\n    const form = this.host.closest('form');\n    if (form == null) return;\n\n    form.addEventListener('formdata', (event: FormDataEvent) => {\n      event.formData.append(this.name, this.value);\n    });\n  }\n\n  private delegateFocusToNativeInput() {\n    this.host.shadowRoot.querySelector('input').focus();\n  }\n\n  private handleInput = (event: InputEvent) => {\n    const input: HTMLInputElement = event.target as HTMLInputElement;\n    this.value = input.value;\n  };\n\n  private handleChange = () => {\n    this.host.dispatchEvent(new window.Event('change'));\n  };\n\n  private showTypingInfo() {\n    return this.hasFocus;\n  }\n\n  private showDescription() {\n      return true;\n  }\n\n  private isLabelSlotProvided(): boolean {\n    return !!this.host.querySelector('[slot=\"label\"]');\n  }\n\n  private isDescriptionSlotProvided(): boolean {\n    return !!this.host.querySelector('[slot=\"description\"]');\n  }\n\n\n  render() {\n    return (\n      <Host tabIndex={this.disabled ? -1 : 0}>\n        <div>\n          {this.isLabelSlotProvided() && (\n            <div id=\"label\" class={{ inline: !this.value && !this.hasFocus }}>\n              <slot name=\"label\" />\n            </div>\n          )}\n          {/*<div id=\"input-wrapper\">*/}\n            <input\n              placeholder={this.placeholder}\n              onInput={this.handleInput}\n              onChange={this.handleChange}\n              value={this.value}\n            />\n          {/*</div>*/}\n          {this.isInfoContainerNeeded() && (\n            <div id=\"info\">\n              {this.isDescriptionSlotProvided() && this.showDescription() && (\n                <div id=\"description\">\n                  <slot name=\"description\" />\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </Host>\n    );\n  }\n\n  private isInfoContainerNeeded() {\n    return (this.isDescriptionSlotProvided() && this.showDescription()) || this.showTypingInfo();\n  }\n}\n"],"version":3}