{"version":3,"file":"input.js","sourceRoot":"","sources":["../../../src/components/input/input.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Element,\n  h,\n  Host,\n  Listen,\n  Prop,\n  State,\n} from '@stencil/core';\n\n/**\n * @nativeEvent click - dispatched when input was clicked => 'event.target.value' delivers the current value\n * @nativeEvent change - dispatched when input has changed => 'event.target.value' delivers the current value\n * @nativeEvent invalid - dispatched when input is invalid => 'event.target.value' delivers the invalid value\n *\n * @slot description - named slot 'description', here is any HTML content allowed.\n * @slot label - named slot 'label', here is any HTML content allowed.\n */\n@Component({\n  tag: 'my-input',\n  styleUrls: {\n    vwag: 'themes/vwag/input.vwag.scss'\n  },\n  shadow: { delegatesFocus: true },\n})\nexport class Input {\n  /**\n   * toggles readonly mode\n   */\n  @Prop({ reflect: true }) readonly readonly: boolean;\n\n  /**\n   * placeholder of the input-field<br>\n   */\n  @Prop({ reflect: true }) readonly placeholder: string;\n\n  /**\n   * value of the input-field\n   */\n  @Prop({ reflect: true, mutable: true }) value: string;\n\n  /**\n   * sets input-field to readonly\n   */\n  @Prop({ reflect: true }) readonly disabled: boolean;\n\n  /**\n   * specifies the type of input element\n   */\n  @Prop({ reflect: true }) readonly type: string = 'text';\n\n  /**\n   * name of the input element to support forms\n   */\n  @Prop({ reflect: true }) readonly name: string;\n\n  /**\n   * determines which brand to use.\n   */\n  @Prop({ reflect: true }) readonly brand: string = 'vwag';\n\n  @State() hasFocus: boolean;\n\n  @Element() host: HTMLElement;\n\n  @Listen('focus')\n  onFocus() {\n    this.hasFocus = true;\n    this.delegateFocusToNativeInput();\n  }\n\n  @Listen('click')\n  onClick() {\n    this.delegateFocusToNativeInput();\n  }\n\n  componentDidLoad() {\n   this.initFormEvent();\n  }\n\n  private initFormEvent() {\n    const form = this.host.closest('form');\n    if (form == null) return;\n\n    form.addEventListener('formdata', (event: FormDataEvent) => {\n      event.formData.append(this.name, this.value);\n    });\n  }\n\n  private delegateFocusToNativeInput() {\n    this.host.shadowRoot.querySelector('input').focus();\n  }\n\n  private handleInput = (event: InputEvent) => {\n    const input: HTMLInputElement = event.target as HTMLInputElement;\n    this.value = input.value;\n  };\n\n  private handleChange = () => {\n    this.host.dispatchEvent(new window.Event('change'));\n  };\n\n  private showTypingInfo() {\n    return this.hasFocus;\n  }\n\n  private showDescription() {\n      return true;\n  }\n\n  private isLabelSlotProvided(): boolean {\n    return !!this.host.querySelector('[slot=\"label\"]');\n  }\n\n  private isDescriptionSlotProvided(): boolean {\n    return !!this.host.querySelector('[slot=\"description\"]');\n  }\n\n\n  render() {\n    return (\n      <Host tabIndex={this.disabled ? -1 : 0}>\n        <div>\n          {this.isLabelSlotProvided() && (\n            <div id=\"label\" class={{ inline: !this.value && !this.hasFocus }}>\n              <slot name=\"label\" />\n            </div>\n          )}\n          {/*<div id=\"input-wrapper\">*/}\n            <input\n              placeholder={this.placeholder}\n              onInput={this.handleInput}\n              onChange={this.handleChange}\n              value={this.value}\n            />\n          {/*</div>*/}\n          {this.isInfoContainerNeeded() && (\n            <div id=\"info\">\n              {this.isDescriptionSlotProvided() && this.showDescription() && (\n                <div id=\"description\">\n                  <slot name=\"description\" />\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </Host>\n    );\n  }\n\n  private isInfoContainerNeeded() {\n    return (this.isDescriptionSlotProvided() && this.showDescription()) || this.showTypingInfo();\n  }\n}\n"]}